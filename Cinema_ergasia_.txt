Drop table if exists movie;
Drop table if exists actor;
Drop table if exists music;
Drop table if exists director;
Drop table if exists upcoming;
Drop table if exists log_mo;

-------------------------------------------------------------------------------------------------------

Select * From movie;
Select * From actor;
Select * From music;
Select * From director;
Select * From upcoming;
Select * from log_mo;

-------------------------------------------------------------------------------------------------------

Create Table movie(m_id varchar(5), movie_title varchar(50) not null unique, paragogi varchar(50) not null, releaseDate varchar(50) not null, critique varchar(50), CONSTRAINT movieid_pkey PRIMARY KEY (m_id));

Create Table actor(a_id varchar(5), actor_name varchar(50) not null, gender varchar(50) not null, age varchar(50) not null, movie_title varchar(50) not null, CONSTRAINT actorid_pkey PRIMARY KEY (a_id), CONSTRAINT PK_mtitle_par FOREIGN KEY (movie_title) REFERENCES movie(movie_title) ON DELETE CASCADE);

Create Table music(mu_id varchar(5), music_title varchar(50), movie_title varchar(50) not null, composer varchar(50), CONSTRAINT musicid_pkey PRIMARY KEY (mu_id), constraint PK_music_par FOREIGN KEY (movie_title) REFERENCES movie(movie_title) ON DELETE CASCADE);

Create Table director(d_id varchar(5), dir_name varchar(50) not null, movie_title varchar(50) not null, dir_age varchar(50) not null, CONSTRAINT directorid_pkey PRIMARY KEY (d_id),constraint PK_director_par FOREIGN KEY (movie_title) REFERENCES movie(movie_title) ON DELETE CASCADE);

Create Table upcoming(u_id varchar(5), movie_title varchar(50) not null, releaseDate varchar(50) not null,paragogi varchar(50) not null, CONSTRAINT upcomingid_pkey PRIMARY KEY (u_id), constraint PK_up_par FOREIGN KEY (movie_title) REFERENCES movie(movie_title) ON DELETE CASCADE);

-------------------------------------------------------------------------------------------------------

Insert Into movie Values
('1','The Godfather','Usa','1972','9.2'),
('2','Forrest Gump','Usa','1994','8.8'),
('3','Interstellar','Greek','2014','8.6'),
('4','Gladiator','Greek','2000','8.5'),
('5','Braveheart','Foreign','1995','8.4'),
('6','Spellbound','Usa','2023','-'),
('7','The Tigers Apprentice','Foreign','2024','-'),
('8','Mission: Impossible - Dead Reckoning - Part One','Usa','2022','-');

Insert Into actor Values
('1','Marlon Brando','Male','80','The Godfather'),
('2','Tom Hanks','Male','66','Forrest Gump'),
('3','Matthew McConaughey','Male','52','Interstellar'),
('4','Russell Crowe','Male','58','Gladiator'),
('5','Mel Gibson','Male','66','Braveheart'),
('6','Rachel Zegler','Female','21','Spellbound'),
('7','Michelle Yeoh','Female','60','The Tigers Apprentice'),
('8','Tom Cruise','Male','60','Mission: Impossible - Dead Reckoning - Part One');

Insert Into music Values
('1','Main Title (The Godfather Waltz)','The Godfather','Nino Rota'),
('2','Hound Dog','Forrest Gump','Elvis Presley'),
('3','Dreaming Of The Crash','Interstellar','Hans Zimmer'),
('4','Progeny','Gladiator','Hans Zimmer'),
('5','Praise, my soul, the King of heaven','Braveheart','Henry Francis'),
('6','-','Spellbound','Alan Menken'),
('7','--','The Tigers Apprentice','-'),
('8','---','Mission: Impossible - Dead Reckoning - Part One','Lorne Balfe');

Insert Into director Values
('1','Francis Ford Coppola','The Godfather','83'),
('2','Robert Zemeckis','Forrest Gump','70'),
('3','Christopher Nolan','Interstellar','52'),
('4','Ridley Scott','Gladiator','84'),
('5','Mel Gibson','Braveheart','66'),
('6','Vicky Jenson','Spellbound','62'),
('7','Raman Hui','The Tigers Apprentice','59'),
('8','Christopher McQuarrie','Mission: Impossible - Dead Reckoning - Part One','53');

Insert Into upcoming Values
('1','Spellbound','2023','Usa'),
('2','The Tigers Apprentice','2024','Foreign'),
('3','Mission: Impossible - Dead Reckoning - Part One','2023','Usa');

-------------------------------------------------------------------------------------------------------

Create Or Replace Function insert_movies(varchar, varchar, varchar, varchar, varchar)
Returns SETOF Movie AS $$
	insert into movie (m_id, movie_title, paragogi, releasedate, critique)  values ($1, $2, $3, $4, $5);
	select * from movie
$$ Language SQL;

Create Or Replace Function insert_actors(varchar, varchar, varchar, varchar, varchar)
Returns SETOF Actor AS $$
	insert into actor (a_id, actor_name, gender, age, movie_title) values ($1, $2, $3, $4, $5);
	select * from actor
$$ Language SQL;

Create Or Replace Function insert_music(varchar, varchar, varchar, varchar)
Returns SETOF Music AS $$
	insert into music (mu_id, music_title, movie_title, composer) values ($1, $2, $3, $4);
	select * from music
$$ Language SQL;

Create Or Replace Function insert_directors(varchar, varchar, varchar, varchar)
Returns SETOF Director AS $$
	insert into director (d_id, dir_name, movie_title, dir_age) values ($1, $2, $3, $4);
	select * from director
$$ Language SQL;

Create Or Replace Function insert_upcoming(varchar, varchar, varchar, varchar)
Returns SETOF Upcoming AS $$
	insert into upcoming (u_id, movie_title, releasedate, paragogi) values ($1, $2, $3, $4);
	select * from upcoming
$$ Language SQL;


---------------------------------------------------------------------------------------------------------------------------

Create Or Replace Function delete_movies(varchar, varchar, varchar, varchar, varchar)
Returns SETOF Movie AS $$
	delete from movie where m_id=$1 and movie_title=$2 and paragogi=$3 and releasedate=$4 and critique=$5;
	select * from movie
$$ Language SQL;

Create Or Replace Function delete_actors(varchar, varchar, varchar, varchar, varchar)
Returns SETOF Actor AS $$
	delete from actor where a_id=$1 and actor_name=$2 and gender=$3 and age=$4 and movie_title=$5;
	select * from actor
$$ Language SQL;

Create Or Replace Function delete_music(varchar, varchar, varchar, varchar)
Returns SETOF Music AS $$
	delete from music where mu_id=$1 and music_title=$2 and movie_title=$3 and composer=$4;
	select * from music
$$ Language SQL;

Create Or Replace Function delete_directors(varchar, varchar, varchar, varchar)
Returns SETOF Director AS $$
	delete from director where d_id=$1 and dir_name=$2 and movie_title=$3 and dir_age=$4;
	select * from director
$$ Language SQL;

Create Or Replace Function delete_upcoming(varchar, varchar, varchar, varchar)
Returns SETOF Upcoming AS $$
	delete from upcoming where u_id=$1 and movie_title=$2 and releasedate=$3 and paragogi=$4;
	select * from upcoming
$$ Language SQL;
-----------------------------------------------------------------------------------------------------
Create Table log_mo(
operation char(1) NOT NULL,
stamp timestamp NOT NULL primary key,
userid varchar(20) NOT NULL,
m_id character varying(5) NOT NULL,
movie_title character varying(50) NOT NULL,
paragogi character varying(50) NOT NULL,
releasedate character varying(50) NOT NULL,
critique character varying(50) NOT NULL);

-----------------------------------------------------------------------------------------------------
Create or Replace Function process_logmo()
Returns trigger AS
$BODY$
BEGIN
IF (TG_OP = 'DELETE') THEN
INSERT INTO log_mo SELECT 'D', now(), user, OLD.*;
Return OLD;
elsif (TG_OP = 'UPDATE') THEN
INSERT INTO log_mo SELECT 'U', now(), user, NEW.*;
Return NEW;
elsif (TG_OP = 'INSERT') THEN
INSERT INTO log_mo SELECT 'I', now(), user, NEW.*;
Return NEW;
END IF;
RETURN NULL;
END;
$BODY$
LANGUAGE plpgsql

-----------------------------------------------------------------------------------------------------
CREATE TRIGGER
log_mo
AFTER INSERT OR UPDATE OR DELETE ON movie
FOR EACH ROW EXECUTE PROCEDURE
process_logmo();

---------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION drop_tables()
Returns void AS
$$
Drop table if exists movie;
Drop table if exists actor;
Drop table if exists music;
Drop table if exists director;
Drop table if exists upcoming;
$$
LANGUAGE SQL;
-----------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION displayActor()
  RETURNS SETOF actor AS
$BODY$
select * from actor
$BODY$
  LANGUAGE sql VOLATILE
  
  CREATE OR REPLACE FUNCTION displayDirector()
  RETURNS SETOF director AS
$BODY$
select * from director
$BODY$
  LANGUAGE sql VOLATILE
 

CREATE OR REPLACE FUNCTION displayMovie()
  RETURNS SETOF movie AS
$BODY$
select * from movie
$BODY$
  LANGUAGE sql VOLATILE
  
 CREATE OR REPLACE FUNCTION displayMusic()
  RETURNS SETOF music AS
$BODY$
select * from music
$BODY$
  LANGUAGE sql VOLATILE 

 CREATE OR REPLACE FUNCTION displayUpcoming()
  RETURNS SETOF upcoming AS
$BODY$
select * from upcoming
$BODY$
  LANGUAGE sql VOLATILE 

CREATE OR REPLACE FUNCTION displaylog_mo()
  RETURNS SETOF log_mo AS
$BODY$
select * from log_mo
$BODY$
  LANGUAGE sql VOLATILE 
-----------------------------------------------------------------------------------------------------

findactor
CREATE OR REPLACE FUNCTION findactor(character varying)
  RETURNS SETOF actor AS
$BODY$
	select * from actor 
	where actor_name = $1
$BODY$
  LANGUAGE sql VOLATILE
  
  
finddirector
CREATE OR REPLACE FUNCTION finddirector(character varying)
  RETURNS SETOF director AS
$BODY$
	select * from director
	where dir_name=$1;
$BODY$
  LANGUAGE sql VOLATILE

findmovie
CREATE OR REPLACE FUNCTION findmovie(character varying)
  RETURNS SETOF movie AS
$BODY$
	select * from movie 
	where movie_title=$1
$BODY$
  LANGUAGE sql VOLATILE

findmusic
CREATE OR REPLACE FUNCTION findmusic(character varying)
  RETURNS SETOF music AS
$BODY$
	select * from music 
	where mu_id = $1
$BODY$
  LANGUAGE sql VOLATILE
  
  
findupcoming
CREATE OR REPLACE FUNCTION findupcoming(character varying)
  RETURNS SETOF upcoming AS
$BODY$
	select * from upcoming
	where movie_title=$1;
$BODY$
  LANGUAGE sql VOLATILE
-----------------------------------------------------------------------------------------------------

functions filterBY (dynamic queries)
  
 CREATE OR REPLACE FUNCTION filtermovie(character varying)
  RETURNS SETOF movie AS
$BODY$
Select * from movie 
where paragogi=$1;
$BODY$
  LANGUAGE sql VOLATILE
  
  --------------------------
  
  CREATE OR REPLACE FUNCTION filteractor(character varying)
  RETURNS SETOF actor AS
$BODY$
Select * from actor 
where gender=$1;
$BODY$
  LANGUAGE sql VOLATILE
  
  --------------------------------
  
  CREATE OR REPLACE FUNCTION filtermusic(character varying)
  RETURNS SETOF music AS
$BODY$
Select * from music 
where movie_title=$1;
$BODY$
  LANGUAGE sql VOLATILE

------------------------------------

  CREATE OR REPLACE FUNCTION filterdirector(character varying)
  RETURNS SETOF director AS
$BODY$
Select * from director 
where dir_age=$1;
$BODY$
  LANGUAGE sql VOLATILE
  